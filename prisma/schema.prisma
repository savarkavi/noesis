generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String           @id @default(uuid())
  username              String           @unique
  fullname              String?
  email                 String?          @unique
  passwordHash          String?
  googleId              String?          @unique
  bio                   String?
  avatarUrl             String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]         @relation("Following")
  followers             Follow[]         @relation("Follower")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  recievedNotifications Notification[]   @relation("Recipient")
  issuedNotifications   Notification[]   @relation("Issuer")
  bookmarkfolders       Bookmarkfolder[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id                      String         @id @default(uuid())
  userId                  String
  caption                 String?
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments             Media[]
  sourceTitle             String?
  sourceUrl               String
  sourceDomain            String
  likes                   Like[]
  bookmarks               Bookmark[]
  comments                Comment[]
  linkMetadataId          String?
  linkMetadata            LinkMetadata?  @relation(fields: [linkMetadataId], references: [id])
  notifications           Notification[]
  type                    PostType
  youtubeVideoId          String?
  youtubeVideoTitle       String?
  youtubeVideoDescription String?
  youtubeVideoThumbnail   String?

  createdAt DateTime @default(now())

  @@map("posts")
}

enum PostType {
  YOUTUBE_VIDEO
  ARTICLE
  EXTERNAL_LINK
  MEDIA
}

model LinkMetadata {
  id          String @id @default(uuid())
  title       String
  description String
  image       String
  url         String @unique
  posts       Post[]

  createdAt DateTime @default(now())

  @@map("linksMetadata")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Media {
  id     String    @id @default(uuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  url    String
  type   MediaType

  createdAt DateTime @default(now())

  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id      String                     @id @default(uuid())
  userId  String
  user    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post                       @relation(fields: [postId], references: [id], onDelete: Cascade)
  folders BookmarkToBookmarkfolder[]

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Bookmarkfolder {
  id        String                     @id @default(uuid())
  name      String
  userId    String
  user      User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks BookmarkToBookmarkfolder[]

  createdAt DateTime @default(now())

  @@map("bookmarkfolders")
}

model BookmarkToBookmarkfolder {
  bookmarkId       String
  bookmarkfolderId String
  bookmark         Bookmark       @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  bookmarkfolder   Bookmarkfolder @relation(fields: [bookmarkfolderId], references: [id], onDelete: Cascade)

  @@unique([bookmarkId, bookmarkfolderId])
  @@map("bookmark_to_bookmarkfolder")
}

model Comment {
  id           String        @id @default(uuid())
  content      String
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId       String
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification?

  createdAt DateTime @default(now())

  @@map("comments")
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String?
  issuer      User?            @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId   String?          @unique
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
