generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  fullname     String?
  email        String?    @unique
  passwordHash String?
  googleId     String?    @unique
  bio          String?
  avatarUrl    String?
  sessions     Session[]
  posts        Post[]
  following    Follow[]   @relation("Following")
  followers    Follow[]   @relation("Follower")
  likes        Like[]
  bookmarks    Bookmark[]
  comments     Comment[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String     @id @default(uuid())
  userId      String
  caption     String
  imageUrl    String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  likes       Like[]
  bookmarks   Bookmark[]
  comments    Comment[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Media {
  id     String    @id @default(uuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  url    String
  type   MediaType

  createdAt DateTime @default(now())

  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}
